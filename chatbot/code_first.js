export default {
  async fetch(request, env) {
    const url = new URL(request.url);

    // X√°c th·ª±c webhook Facebook Messenger
    if (request.method === "GET" && url.pathname === "/webhook") {
      const params = url.searchParams;
      const mode = params.get("hub.mode");
      const token = params.get("hub.verify_token");
      const challenge = params.get("hub.challenge");

      if (mode === "subscribe" && token === env.VERIFY_TOKEN) {
        return new Response(challenge, { status: 200 });
      } else {
        return new Response("Forbidden", { status: 403 });
      }
    }

    // Nh·∫≠n message t·ª´ Facebook Messenger
    if (request.method === "POST" && url.pathname === "/webhook") {
      const body = await request.json();

      if (body.object === "page") {
        for (const entry of body.entry) {
          for (const webhookEvent of entry.messaging) {
            if (webhookEvent.message && webhookEvent.message.text) {
              const userMessage = webhookEvent.message.text;
              const senderId = webhookEvent.sender.id;

              // G·ªçi Gemini tr·∫£ l·ªùi c√¢u h·ªèi
              const geminiAnswer = await queryGemini(userMessage, env.GEMINI_API_TOKEN);

              // G·ª≠i c√¢u tr·∫£ l·ªùi l·∫°i cho user
              await sendMessage(senderId, geminiAnswer, env.PAGE_ACCESS_TOKEN);
            }
          }
        }
      }
      return new Response("EVENT_RECEIVED", { status: 200 });
    }

    return new Response("Hello from Cloudflare Messenger Bot new");
  },
};

// H√†m g·ª≠i message tr·∫£ l·ªùi qua Facebook Messenger API
async function sendMessage(senderPsid, message, token) {
  const res = await fetch(
    `https://graph.facebook.com/v19.0/me/messages?access_token=${token}`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        recipient: { id: senderPsid },
        message: { text: message },
      }),
    }
  );
  return res.json();
}

// H√†m g·ªçi Gemini API l·∫•y c√¢u tr·∫£ l·ªùi v·ªõi phong c√°ch c·ªë ƒë·ªãnh
async function queryGemini(prompt, geminiApiKey) {
  const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';

  const knowledgeBase = `ƒê√¢y l√† c√°c th√¥ng tin b·∫°n ph·∫£i d·ª±a v√†o khi tr·∫£ l·ªùi:
  "
  Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Shalom
  "

  Lo·∫°i √°o:
  "
  - √Åo thun C∆° ƒê·ªëc
  - √Åo thun C√¥ng Ty
  - √Åo thun C√° Nh√¢n
  - √Åo thun Couple
  - √Åo thun Nh√≥m
  - √Åo thun Gia ƒê√¨nh
  - √Åo thun Team Building
  - √Åo l·ªõp
  - ƒê·ªìng Ph·ª•c M·∫ßm Non
  - √Åo m√πa h√®
  - √Åo Polo
  Link tham kh·∫£o: https://shalom.vn
  "
  
  M√†u s·∫Øc: 
  "
  B√™n m√¨nh c√≥ r·∫•t nhi·ªÅu m√†u cho t·ª´ng lo·∫°i √°o (h∆°n 20 m√†u). B·∫°n c√≥ th·ªÉ tham kh·∫£o b·∫£ng m√†u t·∫°i ƒë√¢y: https://shalom.vn/bang-mau-ao-thun/
  "
  
  Gi√°: 
  "
  ƒê·ªÉ c√≥ b√°o gi√° t·ªët nh·∫•t, anh/ch·ªã vui l√≤ng cho em bi·∫øt s·ªë l∆∞·ª£ng d·ª± ki·∫øn nh√©. V√¨ chi ph√≠ s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh d·ª±a tr√™n ch·∫•t li·ªáu v√† ki·ªÉu in/th√™u m√† m√¨nh l·ª±a ch·ªçn ·∫°.
  "
  
  Size: 
  "
  B√™n m√¨nh c√≥ c√°c size √°o thun t·ª´ S ƒë·∫øn XXL. D∆∞·ªõi ƒë√¢y l√† k√≠ch th∆∞·ªõc chu·∫©n c·ªßa t·ª´ng size (¬±1-2cm):
  Size chu·∫©n (¬±1-2cm):
  S: ngang 48cm - d√†i 65cm
  M: ngang 50cm - d√†i 67cm
  L: ngang 52cm - d√†i 69cm
  XL: ngang 54cm - d√†i 71cm
  XXL: ngang 56cm - d√†i 73cm
  "
  
  Ch·∫•t li·ªáu: 
  "
  Cotton
  V·∫£i ƒë≈©i
  AiryCool
  C√° s·∫•u cotton
  Sufa
  Cotton 100%
  Cotton 4c
  Tici
  Cotton 2c
  C√° s·∫•u m√®
  Poly Th√°i
  "
  
  C√°ch ƒë·∫∑t h√†ng:
  " 
  Q: mu·ªën ƒë·∫∑t h√†ng
  A:
  - Ch·ªçn m·∫´u + m√†u + size + s·ªë l∆∞·ª£ng 
  - Cung c·∫•p T√™n + ƒë·ªãa ch·ªâ nh·∫≠n h√†ng + s·ªë ƒëi·ªán tho·∫°i
  - X√°c nh·∫≠n ƒë∆°n, thanh to√°n c·ªçc 50%
  Q: (kh√°ch g·ª≠i th√¥ng tin ƒë∆°n h√†ng: v√≠ d·ª• "√Åo thun, size M, m√†u ƒëen, 2 c√°i. T√™n: Nam, ƒêC: HN, SƒêT: 09...")
  A: C·∫£m ∆°n b·∫°n ƒë√£ cung c·∫•p th√¥ng tin üíñ
  B√™n m√¨nh ƒë√£ ghi nh·∫≠n ƒë∆°n h√†ng v√† s·∫Ω g·ªçi ƒëi·ªán x√°c nh·∫≠n l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t.
  "
  
  Ph√≠ v·∫≠n chuy·ªÉn: 
  "
  N·ªôi th√†nh HN/HCM: 25.000 VND
  Li√™n t·ªânh: 35.000-50.000 VND t√πy khu v·ª±c
  Giao nhanh 1-2 ng√†y (c√≥ ph·ª• thu)
  "
  
  Thanh to√°n: 
  "
  N·ªôi th√†nh HN/HCM: 25.000 VND
  Li√™n t·ªânh: 35.000-50.000 VND t√πy khu v·ª±c
  Giao nhanh 1-2 ng√†y (c√≥ ph·ª• thu)
  "
  
  in:         
  "
  - Th√™u
  - in l·ª•a
  - In PET
  - Ngh·ªá In Chuy·ªÉn Nhi·ªát
  - In Decal
  "
  
  Logo:         
  "
  Q: h·ªèi t∆∞ v·∫•n v·ªÅ logo
  A: b·∫°n ƒë√£ c√≥ logo? hay b·∫°n mu·ªën b√™n m√¨nh thi·∫øt k·∫ø
  Q: ƒë√£ c√≥ logo 
  A: b·∫°n c√≥ th·ªÉ g·ª≠i cho m√¨nh logo b·∫°n mu·ªën in
  Q: ch∆∞a c√≥ logo
  A: b·∫°n c√≥ th·ªÉ cho m√¨nh √Ω t∆∞·ªüng, m√¨nh s·∫Ω thi·∫øt k·∫ø gi√∫p b·∫°n.
  "
  
  Th√¥ng tin li√™n h·ªá:         
  "
  Fanpage: https://www.facebook.com/profile.php?id=61565282417832
  Zalo: 09.231.294.79
  Tiktok: https://www.tiktok.com/@shalom_uniform
  "
  `;

  // H∆∞·ªõng d·∫´n c·ªë ƒë·ªãnh cho chatbot
  //Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin ƒë√£ cho ·ªü tr√™n.
  // N·∫øu c√¢u h·ªèi kh√¥ng n·∫±m trong th√¥ng tin, th√¨ b·∫°n kh√¥ng c·∫ßn tr·∫£ l·ªùi
  const instruction = `
  B·∫°n l√† chatbot h·ªó tr·ª£ Facebook Messenger, lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
  Lu√¥n tr·∫£ l·ªùi ƒë√∫ng 1 c√¢u, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, c√≥ th·ªÉ th√™m emoji n·∫øu ph√π h·ª£p.
  `;

  // Gh√©p th√¥ng tin c·ªë ƒë·ªãnh + h∆∞·ªõng d·∫´n + c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
  const finalPrompt = `${knowledgeBase.trim()}\n\n${instruction.trim()}\n\nNg∆∞·ªùi d√πng: ${prompt}\nChatbot:`;

  const payload = {
    contents: [
      {
        parts: [{ text: finalPrompt }],
      },
    ],
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': geminiApiKey,
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    return content || "";
  } catch (err) {
    console.error("Gemini API error:", err);
    return "Xin l·ªói üòÖ, hi·ªán t·∫°i m√¨nh ƒëang g·∫∑p s·ª± c·ªë, b·∫°n vui l√≤ng th·ª≠ l·∫°i sau nh√©!";
  }
}
